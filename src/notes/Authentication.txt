Section 18, Lesson 355
How to pass token for protecting things
1.  in the actions document:
    ...
    export cosnt foo = (token) => {
        return dispatch => {
            axios.get('/[node].json?auth=' + token)
                ...
    }
    ...

2.  in the container document:
    ...
    componentDidMount() {
        this.props.onFoo(this.props.token);
    }
    ...
    const mapStateToProps = state => {
        return {
            ...
            token: state.auth.token
        }
    }
    cosnt mapDispatchToProps = dispatch => {
        return {
            onFoo: (token) => dispatch(actions.foo(token))
        };
    };
    ...

How to hide or change components with authentication
(Chapter 18, Lesson 336)

The idea is to only show login if your are unathenticated,
and a logout link if you are logged in

We need to check our log in state in the navigation component,
but if it is a presentation component, it can't connect to redux

This breaks the idea of having smart and dumb components that
are aware of the store

A better solution would be creating a container that loads the
navigation items. The layoutJS file is a class base component

Connect the partent container to the store so that we can
pass the auth information to the children elements

1.  Import connect, and connect the container:
    connect()(Layout);

2.  Define mapStateToProps:
    const mapStateToProps = state => {
        isAuthenticated: state.auth.token !== null
                                    ^ Token is a good way to check if a user is loged in,
                                      then comparing it to null is a good way to set it
                                      to true if the token exists.
    };
};

3.  Pass the map to the connect function:
    connect(mapStateToProps)(Layout);

4.  Next we need to pass it to the children components:
    ...
    <ChildComponent
        isAuth={this.props.isAuthenticated}
        ...

5.  Then in the child component:
    ...
    <nav>
        <NavigationItems isAuth={props.isAuth} />
    ...

6.  Now in the NavigationItems, we render conditionally:
    ...
    <ul>
        ...
        {props.isAuth ? <NavigationItem link="/logout">/NavigationItem> : <NavigationItem link="/auth"></NavigationItem>}
    ...

Log out link
We want to clear the token, redirect to starting page and dispatch logout action

we redirect from a logout page that calls the logout action that clears the token.


auth != null
{
    "rules": {
        "database node": {
            ".read": "auth != null",
            ".write": "auth != null"
        }
    }
}
